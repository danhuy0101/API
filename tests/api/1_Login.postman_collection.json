{
	"info": {
		"_postman_id": "4dd840ce-9fab-45a2-9eca-1038448bced6",
		"name": "1_Login",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40252150"
	},
	"item": [
		{
			"name": "Login to account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const accountType = pm.iterationData.get(\"type\"); // \"valid\" or \"invalid\"\r",
							"const description = pm.iterationData.get(\"description\") || \"No description\";\r",
							"const testCaseId = pm.iterationData.get(\"testCaseId\") || \"N/A\";\r",
							"const expectedResult =\r",
							"  pm.iterationData.get(\"expectedResult\") || \"No expected result\";\r",
							"const testEmail = pm.iterationData.get(\"email\");\r",
							"\r",
							"// Enhanced logging for better traceability\r",
							"console.log(`\\n=== ${testCaseId} ===`);\r",
							"console.log(`Description: ${description}`);\r",
							"console.log(`Email: ${testEmail}`);\r",
							"console.log(`Expected: ${expectedResult}`);\r",
							"console.log(`Response Code: ${pm.response.code}`);\r",
							"console.log(`Response Body:`, response);\r",
							"\r",
							"// ----- VALID ACCOUNT TESTS -----\r",
							"if (accountType === \"valid\") {\r",
							"  pm.test(`✅ ${testCaseId} - Status Code 200 (${description})`, function () {\r",
							"    pm.expect(pm.response.code, `Expected 200 for: ${description}`).to.equal(\r",
							"      200\r",
							"    );\r",
							"  });\r",
							"\r",
							"  pm.test(\r",
							"    `✅ ${testCaseId} - Has Required Token Fields (${description})`,\r",
							"    function () {\r",
							"      pm.expect(response).to.have.property(\"access_token\");\r",
							"      pm.expect(response).to.have.property(\"token_type\");\r",
							"      pm.expect(response).to.have.property(\"expires_in\");\r",
							"    }\r",
							"  );\r",
							"\r",
							"  pm.test(\r",
							"    `✅ ${testCaseId} - Token Field Types Valid (${description})`,\r",
							"    function () {\r",
							"      pm.expect(response.access_token).to.be.a(\"string\");\r",
							"      pm.expect(response.token_type).to.be.a(\"string\");\r",
							"      pm.expect(response.expires_in).to.be.a(\"number\");\r",
							"    }\r",
							"  );\r",
							"\r",
							"  if (pm.response.code !== 200 || !response.access_token) {\r",
							"    pm.test(\"Login failed due to server error\", function () {\r",
							"      pm.expect.fail(\"Login failed with status: \" + pm.response.code);\r",
							"    });\r",
							"  }\r",
							"}\r",
							"// ----- INVALID ACCOUNT TESTS -----\r",
							"else if (accountType === \"invalid\") {\r",
							"  pm.test(`❌ ${testCaseId} - Status Code 401 (${description})`, function () {\r",
							"    pm.expect(pm.response.code).to.equal(401);\r",
							"  });\r",
							"\r",
							"  pm.test(\r",
							"    `❌ ${testCaseId} - Has Error Property (${description})`,\r",
							"    function () {\r",
							"      pm.expect(response).to.have.property(\"error\");\r",
							"    }\r",
							"  );\r",
							"\r",
							"  pm.test(\r",
							"    `❌ ${testCaseId} - Error Message Unauthorized (${description})`,\r",
							"    function () {\r",
							"      pm.expect(response.error).to.equal(\"Unauthorized\");\r",
							"    }\r",
							"  );\r",
							"\r",
							"  console.log(`❌ ${testCaseId} - Login failed as expected`);\r",
							"}\r",
							"// ----- SAFETY CHECK -----\r",
							"else {\r",
							"  pm.test(\r",
							"    `⚠️ ${testCaseId} - Unknown Account Type (${description})`,\r",
							"    function () {\r",
							"      pm.expect.fail(`Unknown account type: ${accountType}`);\r",
							"    }\r",
							"  );\r",
							"  console.log(`⚠️ ${testCaseId} - Unexpected scenario`);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8091",
			"type": "string"
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "email",
			"value": "",
			"type": "string"
		},
		{
			"key": "password",
			"value": "",
			"type": "string"
		},
		{
			"key": "old_password",
			"value": ""
		}
	]
}